DockerImageBuild:
  stage: docker
  image: docker:24.0.6-git
  services:
    - name: docker:24.0.6-dind-alpine3.18
      alias: docker
  before_script:
    # Login GitLab container registry
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    # Get Docker image version from Dockerfile
    - version=$(grep 'LABEL version=' Dockerfile | sed -e 's/.*=//' -e 's/"//g')
    # Set default version when there is no version label in the DockerImage
    - |
      if [ -z "$version" ] || [ ! -n "$version" ] || [ "$version" = "<no value>" ] || [ "$version" = "null" ]; then
        echo "Can't Get DockerImage version from latest image"
        echo "Set Default DockerImage version (v1.0.0)"
        version="1.0.0"
      fi
    # Display DockerImage version
    - echo $version
    # Build Docker image(version tag)
    - docker build --tag $CI_REGISTRY_IMAGE:$version .
    # Push Docker images to GitLab container registry
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:$version
  rules:
    # Run a job only when the Dockerfile is changed.
    - changes:
        - .gitlab/ci/docker.gitlab-ci.yml
        - Dockerfile
  interruptible: true

DangerDockerImageBuild:
  stage: docker
  image: docker:24.0.6-git
  services:
    - name: docker:24.0.6-dind-alpine3.18
      alias: docker
  before_script:
    # Login GitLab container registry
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    # Get Docker image version from Dockerfile
    - version=$(grep 'LABEL version=' Danger.Dockerfile | sed -e 's/.*=//' -e 's/"//g')
    # Set default version when there is no version label in the DockerImage
    - |
      if [ -z "$version" ] || [ ! -n "$version" ] || [ "$version" = "<no value>" ] || [ "$version" = "null" ]; then
        echo "Can't Get DockerImage version from latest image"
        echo "Set Default DockerImage version (v1.0.0)"
        version="1.0.0"
      fi
    # Display DockerImage version
    - echo $version
    # Build Docker image(version tag)
    - docker build --tag $CI_REGISTRY_IMAGE/danger:$version -f Danger.Dockerfile .
    # Push Docker images to GitLab container registry
    - docker push $CI_REGISTRY_IMAGE/danger:latest
    - docker push $CI_REGISTRY_IMAGE/danger:$version
  rules:
    # Run a job only when the Dockerfile is changed.
    - changes:
        - .gitlab/ci/docker.gitlab-ci.yml
        - Danger.Dockerfile
  interruptible: true
